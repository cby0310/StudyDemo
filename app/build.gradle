apply plugin: 'com.android.application'
//apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'AndResGuard'

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

def verCode = 1
android {

//    aaptOptions.cruncherEnabled = false
//    aaptOptions.useNewCruncher = false

    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.cyb.test.mytest"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode verCode
        versionName APP_VERSION
        resValue("string", 'app_version', APP_VERSION)
        buildConfigField "boolean", "LEO_DEBUG", "true"
        buildConfigField 'String', 'API_SERVER_URL', RELEASE_API_SERVER_URL
        buildConfigField 'String', 'API_SERVER_URL_MALL', RELEASE_API_SERVER_URL_MALL
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        jackOptions {
//            enabled true
//        }

    }

//    aaptOptions {
//        cruncherEnabled = false
//    }

    buildTypes {
        release {
            buildConfigField 'String', 'API_SERVER_URL', RELEASE_API_SERVER_URL
            buildConfigField 'String', 'API_SERVER_URL_MALL', RELEASE_API_SERVER_URL_MALL
            buildConfigField 'String', 'IM_SERVER_HOST', RELEASE_IM_SERVER_HOST
            buildConfigField 'int', 'IM_SERVER_PORT', RELEASE_IM_SERVER_PORT
            buildConfigField "boolean", "LEO_DEBUG", RELEASE_LEO_DEBUG
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField 'String', 'API_SERVER_URL', RELEASE_API_SERVER_URL
            buildConfigField 'String', 'API_SERVER_URL_MALL', RELEASE_API_SERVER_URL_MALL
            buildConfigField 'String', 'IM_SERVER_HOST', RELEASE_IM_SERVER_HOST
            buildConfigField 'int', 'IM_SERVER_PORT', RELEASE_IM_SERVER_PORT
            buildConfigField "boolean", "LEO_DEBUG", RELEASE_LEO_DEBUG
        }

    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    flavorDimensions "xiaomi"
    //渠道Flavors，我这里写了一些常用的
    productFlavors {
        xiaomi {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
        }
        yingyongbao {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "yingyongbao"]
        }
        yingyongbao {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "yingyongbao"]
        }
    }

    //修改生成的apk名字  先屏蔽掉
//    applicationVariants.all { variant ->
//        variant.outputs.all { output ->
//            def newName
//            def timeNow
//            def oldFile = output.outputFile
//            def outDirectory = oldFile.parent
//
//            if ("true".equals(IS_JENKINS)) {
//                timeNow = JENKINS_TIME
//                timeNow = getDate()
//                outDirectory = 'D:/JenkinsHome/jenkins/apk'
//                newName = 'studydemo-android-v' +
//                        APP_VERSION + '-' + variant.productFlavors[0].name /*+ timeNow*/ + '-' + variant.buildType.name + '.apk'
//            } else {
//                timeNow = getDate()
////                if (variant.buildType.name.equals('debug')) {
////                    newName = "studydemo-android-v${APP_VERSION}-debug.apk"
////                } else {
//                newName = 'studydemo-android-v' +
//                        APP_VERSION + '-' + variant.productFlavors[0].name + timeNow + '-' + variant.buildType.name + '.apk'
////                }
//            }
//
//            outputFileName = new File(outDirectory, newName)
//
//        }
//    }

//    android.applicationVariants.all { variant ->
//        variant.outputs.all {
//            outputFileName = rootProject.getName() + "-" + buildType.name + "-" + releaseTime() + "-v" + defaultConfig.versionName + "-" + defaultConfig.versionCode + ".apk";
//        }
//    }

//    compileOptions {
//        targetCompatibility 1.8
//        sourceCompatibility 1.8
//    }


    dataBinding {
        enabled true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //retrofit
    //Gson converter
    //RxJava2 Adapter
    //okhttp
    //    compile 'com.github.bumptech.glide:glide:4.0.0-RC0'
    //    compile 'com.android.support:support-v4:25.3.1'
    //    annotationProcessor 'com.github.bumptech.glide:compiler:4.0.0-RC0'
    //    provided 'javax.annotation:javax.annotation-api:1.2'
    //dagger2
//    compile 'com.android.support:appcompat-v7:25.3.1'
    implementation files('libs/httpmime-4.1.3.jar')
    implementation files('libs/nineoldandroids-2.4.0.jar')


    implementation 'com.android.support:design:26.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation 'com.squareup.okhttp3:okhttp:3.4.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    implementation 'com.github.bumptech.glide:glide:3.5.2'
    implementation 'com.google.dagger:dagger:2.0'
    implementation 'com.android.support:support-v4:26.0.1'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'org.aspectj:aspectjrt:1.8.9'
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.0'
    provided 'org.glassfish:javax.annotation:10.0-b28'
    implementation 'org.jetbrains:annotations-java5:15.0'

    //******** 单元测试相关START *********
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.7.22'
    androidTestCompile 'org.mockito:mockito-android:2.7.22'
    testCompile 'org.robolectric:robolectric:3.3.2'
    testCompile 'org.robolectric:shadows-multidex:3.2.2'
//    testCompile "org.robolectric:robolectric:3.6-SNAPSHOT"
    //******** 单元测试相关 END **********

//    compile 'com.beibei.android:bdbase:3.5.01-SNAPSHOT'
}

andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    // 当你使用v2签名的时候，7zip压缩是无法生效的。
    use7zip = true
    useSign = true
    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
    keepRoot = false
    whiteList = [
            // for your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for google-services
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "resources.arsc"
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.7'
        //path = "/usr/local/bin/7za"
    }

    /**
     * 可选： 如果不设置则会默认覆盖assemble输出的apk
     **/
    finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * 可选: 指定v1签名时生成jar文件的摘要算法
     * 默认值为“SHA1”
     **/
    digestalg = "SHA256"
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
//        classpath 'org.aspectj:aspectjtools:1.8.1'
        classpath 'org.aspectj:aspectjtools:1.8.9'
        classpath 'org.aspectj:aspectjweaver:1.8.9'
    }
}

repositories {
    mavenCentral()
    google()
}

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

final def log = project.logger
final def variants = project.android.applicationVariants
variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}


class MyPlugin implements Plugin<Project> {
    @Override
    void apply(Project project) {
        project.task("helloPlugin") {
            doLast {
                println "hello from the cyb-plugin"
            }
        }
    }
}


apply from: "../config.gradle"
apply plugin: MyPlugin


apply plugin: 'cyb.standaloneplugin'